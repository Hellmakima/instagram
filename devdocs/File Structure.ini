my_project/
├── backend/ # TODO: update for new structure
│   ├── app/                   # Main application source code
│   │   ├── __init__.py        # Makes 'app' a Python package
│   │   ├── main.py            # FastAPI app instance creation, middleware, includes routers
│   │   │
│   │   ├── api/               # API endpoint definitions (routers)
│   │   │   ├── __init__.py
│   │   │   ├── api_v1/        # Optional: Versioning for your API
│   │   │   │   ├── __init__.py
│   │   │   │   ├── endpoints/ # Group endpoints by resource/feature
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   ├── users.py
│   │   │   │   │   ├── posts.py
│   │   │   │   │   └── auth.py
│   │   │   │   └── router.py  # Aggregates all v1 endpoint routers
│   │   │   └── deps.py        # Common API dependencies (e.g., get_current_user)
│   │   │
│   │   ├── core/              # Core application logic and configuration
│   │   │   ├── __init__.py
│   │   │   ├── config.py      # Application settings (using Pydantic's BaseSettings)
│   │   │   └── security.py    # Password hashing, JWT creation/verification logic
│   │   │
│   │   ├── crud/              # CRUD (Create, Read, Update, Delete) database operations
│   │   │   ├── __init__.py
│   │   │   ├── base.py        # Base class for CRUD operations (optional)
│   │   │   ├── crud_user.py
│   │   │   └── crud_post.py
│   │   │
│   │   ├── db/                # Database related files (e.g., SQLAlchemy setup if using SQL)
│   │   │   ├── __init__.py    # For NoSQL like MongoDB with PyMongo, this might just hold connection logic
│   │   │   └── session.py     # Or db_setup.py for MongoDB connection pool
│   │   │
│   │   ├── models/            # Defines data structures (e.g., SQLAlchemy models OR just plain classes/dicts for NoSQL)
│   │   │   │   			   # For Backend DB server
│   │   │   ├── __init__.py
│   │   │   ├── user.py
│   │   │   └── post.py
│   │   │
│   │   ├── schemas/           # Pydantic models for API data validation & serialization
│   │   │   │   			   # For REST API response validation (json body)
│   │   │   ├── __init__.py
│   │   │   ├── user.py        # Schemas like UserCreate, UserRead, UserUpdate
│   │   │   ├── post.py        # Schemas like PostCreate, PostRead
│   │   │   └── token.py       # Schemas for JWT tokens
│   │   │
│   │   └── services/          # Optional: Higher-level business logic
│   │       ├── __init__.py
│   │       └── notification_service.py
│   │
│   ├── static/                # Test with html files
│   │   ├── __init__.py
│   │   ├── index.html
│   │   ├── login.html
│   │   └── ...
│   │
│   ├── tests/                 # Application tests
│   │   ├── __init__.py
│   │   ├── conftest.py        # Pytest fixtures
│   │   └── ...
│   │
│   ├── .env                   # Environment variables (DB connection, secrets) - DO NOT COMMIT
│   ├── .env.example           # Example environment variables file
│   ├── .gitignore             # Specifies intentionally untracked files
│   └── requirements.txt       # Project dependencies
│
├── forntend/
│   ├── src/                     # Main application source code
│   │   ├── app.js               # Express app setup, middleware registration, route mounting
│   │   ├── server.js            # HTTP server creation and startup logic (imports app.js)
│   │   │
│   │   ├── config/              # Configuration files
│   │   │   ├── index.js         # Main config export (loads environment variables)
│   │   │   ├── db.js            # Database connection logic (MongoDB/Mongoose)
│   │   │   └── passport.js      # Optional: Passport.js strategy configuration (for JWT)
│   │   │
│   │   ├── api/                 # API routes definitions
│   │   │   ├── index.js         # Main router that mounts feature-specific routers
│   │   │   ├── users/           # Routes related to users
│   │   │   │   ├── index.js       # User-specific router
│   │   │   │   ├── user.controller.js
│   │   │   │   └── user.validation.js # Optional: Input validation schemas (using Joi, express-validator)
│   │   │   ├── posts/           # Routes related to posts
│   │   │   │   ├── index.js       # Post-specific router
│   │   │   │   ├── post.controller.js
│   │   │   │   └── post.validation.js
│   │   │   ├── auth/            # Routes for authentication (login, register)
│   │   │   │   ├── index.js
│   │   │   │   └── auth.controller.js
│   │   │   └── ...              # Other resource routes (comments, likes, etc.)
│   │   │
│   │   ├── controllers/         # Route handler logic (kept thin) - Often placed within api/ folders (as above)
│   │   │                        # (Alternative structure: keep controllers separate)
│   │   │
│   │   ├── services/            # Business logic layer
│   │   │   ├── user.service.js
│   │   │   ├── post.service.js
│   │   │   ├── auth.service.js  # Handles login logic, token generation
│   │   │   └── file.upload.service.js # Example: handles image uploads
│   │   │
│   │   ├── models/              # Database models (Mongoose schemas for MongoDB and validation)
│   │   │   ├── User.js
│   │   │   └── Post.js
│   │   │   └── Comment.js
│   │   │
│   │   ├── middleware/          # Express middleware functions
│   │   │   ├── auth.js          # JWT verification middleware
│   │   │   ├── error.js         # Central error handling middleware
│   │   │   ├── validate.js      # Middleware to run validation schemas
│   │   │   └── upload.js        # Middleware for handling file uploads (e.g., using multer)
│   │   │
│   │   └── utils/               # Utility functions
│   │       ├── ApiError.js      # Custom error class
│   │       ├── catchAsync.js    # Wrapper for async route handlers to catch errors
│   │       └── helpers.js       # Generic helper functions
│   │
│   ├── tests/                   # Application tests (unit, integration)
│   │   ├── fixtures/            # Test data
│   │   ├── integration/
│   │   └── unit/
│   │
│   ├── public/                  # Static assets (if serving frontend directly, less common for APIs)
│   │   ├── css/
│   │   ├── js/
│   │   └── images/
│   │
│   ├── .env                     # Environment variables (DB URI, JWT_SECRET) - DO NOT COMMIT
│   ├── .env.example             # Example environment variables file
│   ├── .gitignore               # Specifies intentionally untracked files
│   ├── package.json             # Project metadata and dependencies (npm/yarn)
│   ├── package-lock.json or yarn.lock # Lock file for dependencies
│   └── ...
├── LICENSE                    # Fancy fancy
└── README.md              	   # Project documentation